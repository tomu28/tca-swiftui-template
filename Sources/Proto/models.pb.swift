// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Models_TweetType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case notFound // = 0
  case `default` // = 1
  case retweet // = 2
  case reply // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .notFound
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notFound
    case 1: self = .default
    case 2: self = .retweet
    case 3: self = .reply
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notFound: return 0
    case .default: return 1
    case .retweet: return 2
    case .reply: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Models_TweetType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Models_TweetType] = [
    .notFound,
    .default,
    .retweet,
    .reply,
  ]
}

#endif  // swift(>=4.2)

public struct Models_Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Models_Tweet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var type: Models_TweetType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// [url_1, url_2, url_3]
  public var tweetMediaUrls: [String] {
    get {return _storage._tweetMediaUrls}
    set {_uniqueStorage()._tweetMediaUrls = newValue}
  }

  public var favoriteCount: Int32 {
    get {return _storage._favoriteCount}
    set {_uniqueStorage()._favoriteCount = newValue}
  }

  public var retweetCount: Int32 {
    get {return _storage._retweetCount}
    set {_uniqueStorage()._retweetCount = newValue}
  }

  public var replyCount: Int32 {
    get {return _storage._replyCount}
    set {_uniqueStorage()._replyCount = newValue}
  }

  public var targetTweet: Models_Tweet {
    get {return _storage._targetTweet ?? Models_Tweet()}
    set {_uniqueStorage()._targetTweet = newValue}
  }
  /// Returns true if `targetTweet` has been explicitly set.
  public var hasTargetTweet: Bool {return _storage._targetTweet != nil}
  /// Clears the value of `targetTweet`. Subsequent reads from it will return its default value.
  public mutating func clearTargetTweet() {_uniqueStorage()._targetTweet = nil}

  public var postedUser: Models_User {
    get {return _storage._postedUser ?? Models_User()}
    set {_uniqueStorage()._postedUser = newValue}
  }
  /// Returns true if `postedUser` has been explicitly set.
  public var hasPostedUser: Bool {return _storage._postedUser != nil}
  /// Clears the value of `postedUser`. Subsequent reads from it will return its default value.
  public mutating func clearPostedUser() {_uniqueStorage()._postedUser = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Models_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var idName: String = String()

  public var displayName: String = String()

  public var birthday: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _birthday ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_birthday = newValue}
  }
  /// Returns true if `birthday` has been explicitly set.
  public var hasBirthday: Bool {return self._birthday != nil}
  /// Clears the value of `birthday`. Subsequent reads from it will return its default value.
  public mutating func clearBirthday() {self._birthday = nil}

  public var place: String = String()

  public var description_p: String = String()

  public var iconURL: String = String()

  public var tweetCount: Int32 = 0

  public var followeeCount: Int32 = 0

  public var followerCount: Int32 = 0

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _birthday: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "models"

extension Models_TweetType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_FOUND"),
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "RETWEET"),
    3: .same(proto: "REPLY"),
  ]
}

extension Models_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Models_Empty, rhs: Models_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Models_Tweet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tweet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "content"),
    3: .same(proto: "type"),
    4: .standard(proto: "tweet_media_urls"),
    5: .standard(proto: "favorite_count"),
    6: .standard(proto: "retweet_count"),
    7: .standard(proto: "reply_count"),
    8: .standard(proto: "target_tweet"),
    9: .standard(proto: "posted_user"),
    10: .standard(proto: "created_at"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _content: String = String()
    var _type: Models_TweetType = .notFound
    var _tweetMediaUrls: [String] = []
    var _favoriteCount: Int32 = 0
    var _retweetCount: Int32 = 0
    var _replyCount: Int32 = 0
    var _targetTweet: Models_Tweet? = nil
    var _postedUser: Models_User? = nil
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _content = source._content
      _type = source._type
      _tweetMediaUrls = source._tweetMediaUrls
      _favoriteCount = source._favoriteCount
      _retweetCount = source._retweetCount
      _replyCount = source._replyCount
      _targetTweet = source._targetTweet
      _postedUser = source._postedUser
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._tweetMediaUrls) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._favoriteCount) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._retweetCount) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._replyCount) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._targetTweet) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._postedUser) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 2)
      }
      if _storage._type != .notFound {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._tweetMediaUrls.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tweetMediaUrls, fieldNumber: 4)
      }
      if _storage._favoriteCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._favoriteCount, fieldNumber: 5)
      }
      if _storage._retweetCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._retweetCount, fieldNumber: 6)
      }
      if _storage._replyCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._replyCount, fieldNumber: 7)
      }
      if let v = _storage._targetTweet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._postedUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Models_Tweet, rhs: Models_Tweet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._tweetMediaUrls != rhs_storage._tweetMediaUrls {return false}
        if _storage._favoriteCount != rhs_storage._favoriteCount {return false}
        if _storage._retweetCount != rhs_storage._retweetCount {return false}
        if _storage._replyCount != rhs_storage._replyCount {return false}
        if _storage._targetTweet != rhs_storage._targetTweet {return false}
        if _storage._postedUser != rhs_storage._postedUser {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Models_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "id_name"),
    3: .standard(proto: "display_name"),
    4: .same(proto: "birthday"),
    5: .same(proto: "place"),
    6: .same(proto: "description"),
    7: .standard(proto: "icon_url"),
    8: .standard(proto: "tweet_count"),
    9: .standard(proto: "followee_count"),
    10: .standard(proto: "follower_count"),
    11: .standard(proto: "created_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.idName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._birthday) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.place) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.iconURL) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.tweetCount) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.followeeCount) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.followerCount) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.idName.isEmpty {
      try visitor.visitSingularStringField(value: self.idName, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if let v = self._birthday {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.place.isEmpty {
      try visitor.visitSingularStringField(value: self.place, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 7)
    }
    if self.tweetCount != 0 {
      try visitor.visitSingularInt32Field(value: self.tweetCount, fieldNumber: 8)
    }
    if self.followeeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.followeeCount, fieldNumber: 9)
    }
    if self.followerCount != 0 {
      try visitor.visitSingularInt32Field(value: self.followerCount, fieldNumber: 10)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Models_User, rhs: Models_User) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.idName != rhs.idName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._birthday != rhs._birthday {return false}
    if lhs.place != rhs.place {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.tweetCount != rhs.tweetCount {return false}
    if lhs.followeeCount != rhs.followeeCount {return false}
    if lhs.followerCount != rhs.followerCount {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

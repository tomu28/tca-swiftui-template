// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct User_SignUpResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var user: Models_User {
    get {return _user ?? Models_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _user: Models_User? = nil
}

public struct User_SignUpRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var idName: String = String()

  public var displayName: String = String()

  public var birthday: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _birthday ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_birthday = newValue}
  }
  /// Returns true if `birthday` has been explicitly set.
  public var hasBirthday: Bool {return self._birthday != nil}
  /// Clears the value of `birthday`. Subsequent reads from it will return its default value.
  public mutating func clearBirthday() {self._birthday = nil}

  public var place: String = String()

  public var description_p: String = String()

  public var iconURL: String = String()

  public var firebaseToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _birthday: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct User_UpdateUserResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var user: Models_User {
    get {return _user ?? Models_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _user: Models_User? = nil
}

public struct User_UpdateUserRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var idName: String = String()

  public var displayName: String = String()

  public var birthday: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _birthday ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_birthday = newValue}
  }
  /// Returns true if `birthday` has been explicitly set.
  public var hasBirthday: Bool {return self._birthday != nil}
  /// Clears the value of `birthday`. Subsequent reads from it will return its default value.
  public mutating func clearBirthday() {self._birthday = nil}

  public var place: String = String()

  public var description_p: String = String()

  public var iconURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _birthday: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "user"

extension User_SignUpResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignUpResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: User_SignUpResponse, rhs: User_SignUpResponse) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User_SignUpRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignUpRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "id_name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "birthday"),
    4: .same(proto: "place"),
    5: .same(proto: "description"),
    6: .standard(proto: "icon_url"),
    7: .standard(proto: "firebase_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.idName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._birthday) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.place) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.iconURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.firebaseToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.idName.isEmpty {
      try visitor.visitSingularStringField(value: self.idName, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if let v = self._birthday {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.place.isEmpty {
      try visitor.visitSingularStringField(value: self.place, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 6)
    }
    if !self.firebaseToken.isEmpty {
      try visitor.visitSingularStringField(value: self.firebaseToken, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: User_SignUpRequest, rhs: User_SignUpRequest) -> Bool {
    if lhs.idName != rhs.idName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._birthday != rhs._birthday {return false}
    if lhs.place != rhs.place {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.firebaseToken != rhs.firebaseToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User_UpdateUserResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateUserResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: User_UpdateUserResponse, rhs: User_UpdateUserResponse) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User_UpdateUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateUserRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "id_name"),
    3: .standard(proto: "display_name"),
    4: .same(proto: "birthday"),
    5: .same(proto: "place"),
    6: .same(proto: "description"),
    7: .standard(proto: "icon_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.idName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._birthday) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.place) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.iconURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.idName.isEmpty {
      try visitor.visitSingularStringField(value: self.idName, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    if let v = self._birthday {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.place.isEmpty {
      try visitor.visitSingularStringField(value: self.place, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: User_UpdateUserRequest, rhs: User_UpdateUserRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.idName != rhs.idName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._birthday != rhs._birthday {return false}
    if lhs.place != rhs.place {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
